// Generated by gencpp from file tensor_rt/SimCarCommRequest.msg
// DO NOT EDIT!


#ifndef TENSOR_RT_MESSAGE_SIMCARCOMMREQUEST_H
#define TENSOR_RT_MESSAGE_SIMCARCOMMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tensor_rt
{
template <class ContainerAllocator>
struct SimCarCommRequest_
{
  typedef SimCarCommRequest_<ContainerAllocator> Type;

  SimCarCommRequest_()
    : room(0)
    , class(0)  {
    }
  SimCarCommRequest_(const ContainerAllocator& _alloc)
    : room(0)
    , class(0)  {
  (void)_alloc;
    }



   typedef int32_t _room_type;
  _room_type room;

   typedef int32_t _class_type;
  _class_type class;





  typedef boost::shared_ptr< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SimCarCommRequest_

typedef ::tensor_rt::SimCarCommRequest_<std::allocator<void> > SimCarCommRequest;

typedef boost::shared_ptr< ::tensor_rt::SimCarCommRequest > SimCarCommRequestPtr;
typedef boost::shared_ptr< ::tensor_rt::SimCarCommRequest const> SimCarCommRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tensor_rt::SimCarCommRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tensor_rt::SimCarCommRequest_<ContainerAllocator1> & lhs, const ::tensor_rt::SimCarCommRequest_<ContainerAllocator2> & rhs)
{
  return lhs.room == rhs.room &&
    lhs.class == rhs.class;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tensor_rt::SimCarCommRequest_<ContainerAllocator1> & lhs, const ::tensor_rt::SimCarCommRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tensor_rt

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e328dd30e496c2742191cf878109dfb1";
  }

  static const char* value(const ::tensor_rt::SimCarCommRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe328dd30e496c274ULL;
  static const uint64_t static_value2 = 0x2191cf878109dfb1ULL;
};

template<class ContainerAllocator>
struct DataType< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tensor_rt/SimCarCommRequest";
  }

  static const char* value(const ::tensor_rt::SimCarCommRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 room   #目标所在房间  \n"
"int32 class  #目标类别\n"
;
  }

  static const char* value(const ::tensor_rt::SimCarCommRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.room);
      stream.next(m.class);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimCarCommRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tensor_rt::SimCarCommRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tensor_rt::SimCarCommRequest_<ContainerAllocator>& v)
  {
    s << indent << "room: ";
    Printer<int32_t>::stream(s, indent + "  ", v.room);
    s << indent << "class: ";
    Printer<int32_t>::stream(s, indent + "  ", v.class);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TENSOR_RT_MESSAGE_SIMCARCOMMREQUEST_H
